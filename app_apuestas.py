
import streamlit as st
import pandas as pd
import datetime
import os
import json
import ast

USERS_FILE = "usuarios.json"
DATA_FILE = "apuestas.csv"

st.set_page_config(page_title="Gesti√≥n de Apuestas", layout="wide")

# Cargar usuarios
if os.path.exists(USERS_FILE):
    with open(USERS_FILE, "r") as f:
        users = json.load(f)
else:
    users = {}

# Inicializar sesi√≥n
if "logueado" not in st.session_state:
    st.session_state.logueado = False
if "usuario" not in st.session_state:
    st.session_state.usuario = ""
if "tipo_apuesta" not in st.session_state:
    st.session_state.tipo_apuesta = "Simple"

if not st.session_state.logueado:
    st.title("üìä App de Gesti√≥n de Apuestas")
    st.subheader("üîê Inicio de sesi√≥n")

    username = st.text_input("Usuario")
    password = st.text_input("Contrase√±a", type="password")

    if username and password:
        if username in users:
            if users[username] == password:
                st.session_state.logueado = True
                st.session_state.usuario = username
                st.success(f"Sesi√≥n iniciada como **{username}**")
                st.rerun()
            else:
                st.error("‚ùå Contrase√±a incorrecta")
        else:
            if st.button("Registrar nuevo usuario"):
                users[username] = password
                with open(USERS_FILE, "w") as f:
                    json.dump(users, f)
                st.success("‚úÖ Usuario registrado correctamente. Recarga la p√°gina para continuar.")
else:
    st.markdown(
        f"<div style='text-align:right; font-size:0.9em; color:gray;'>üë§ Usuario: <b>{st.session_state.usuario}</b></div>",
        unsafe_allow_html=True
    )
    st.title("üìä App de Gesti√≥n de Apuestas")

    if os.path.exists(DATA_FILE):
        df = pd.read_csv(DATA_FILE)
    else:
        df = pd.DataFrame(columns=[
            "Usuario", "Fecha", "Evento", "Competici√≥n", "Deporte", "Tipo de Apuesta",
            "Pron√≥sticos", "Cuotas Individuales", "Cuota Total",
            "Stake (1-10)", "Stake (‚Ç¨)", "Resultado", "Ganancia/P√©rdida (‚Ç¨)", "Bank (‚Ç¨)"
        ])

    tabs = st.tabs(["üìã Mis Apuestas", "üëÄ Ver Otras", "üìà Comparativa"])
    session_user = st.session_state.usuario

    with tabs[0]:
        st.header("üìã Mis Apuestas")

        # fuera del form
        st.subheader("‚ûï Nueva Apuesta")
        apuesta_tipo = st.radio(
            "Tipo de apuesta",
            ["Simple", "Combinada"],
            index=0 if st.session_state.get("tipo_apuesta", "Simple") == "Simple" else 1
        )
        st.session_state["tipo_apuesta"] = apuesta_tipo

        with st.form("form_apuesta"):
            col1, col2 = st.columns(2)
            with col1:
                fecha = st.date_input("Fecha", datetime.date.today())
                evento = st.text_input("Evento")
                competicion = st.text_input("Competici√≥n")
            with col2:
                deporte = st.selectbox("Deporte", ["F√∫tbol", "Baloncesto", "Tenis", "Otro"])
                stake = st.slider("Stake (1-10)", 1, 10, 1)

            pronosticos = []
            cuotas_individuales = []
            cuota_total = 1.0

            if st.session_state["tipo_apuesta"] == "Combinada":
                with st.expander("A√±adir pron√≥sticos de la combinada"):
                    num_pronos = st.number_input("¬øCu√°ntos pron√≥sticos?", min_value=2, max_value=10, step=1)
                    for i in range(int(num_pronos)):
                        pron = st.text_input(f"Pron√≥stico {i+1}", key=f"pron_{i}")
                        cuota = st.number_input(f"Cuota pron√≥stico {i+1}", min_value=1.01, step=0.01, key=f"cuota_{i}")
                        pronosticos.append(pron)
                        cuotas_individuales.append(cuota)
                    for c in cuotas_individuales:
                        cuota_total *= c
            else:
                pron = st.text_input("Pron√≥stico simple")
                cuota_total = st.number_input("Cuota", min_value=1.01, step=0.01)
                pronosticos.append(pron)
                cuotas_individuales.append(cuota_total)

            bank_anterior = df[df["Usuario"] == session_user]["Bank (‚Ç¨)"].iloc[-1] if not df[df["Usuario"] == session_user].empty else 200
            stake_estimado = round(stake * bank_anterior / 100, 2)
            st.markdown(f"üí∞ <b>Importe a apostar: {stake_estimado} ‚Ç¨</b>", unsafe_allow_html=True)
            st.markdown(f"üéØ <b>Cuota total: {round(cuota_total, 2)}</b>", unsafe_allow_html=True)

            enviar = st.form_submit_button("A√±adir Apuesta")

        if enviar:
            nueva = {
                "Usuario": session_user,
                "Fecha": fecha,
                "Evento": evento,
                "Competici√≥n": competicion,
                "Deporte": deporte,
                "Tipo de Apuesta": st.session_state["tipo_apuesta"],
                "Pron√≥sticos": str(pronosticos),
                "Cuotas Individuales": str(cuotas_individuales),
                "Cuota Total": cuota_total,
                "Stake (1-10)": stake,
                "Stake (‚Ç¨)": stake_estimado,
                "Resultado": "Pendiente",
                "Ganancia/P√©rdida (‚Ç¨)": 0,
                "Bank (‚Ç¨)": bank_anterior
            }
            df = pd.concat([df, pd.DataFrame([nueva])], ignore_index=True)
            df.to_csv(DATA_FILE, index=False)
            st.success("‚úÖ Apuesta registrada correctamente")
            st.rerun()
