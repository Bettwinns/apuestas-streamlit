import streamlit as st
import pandas as pd
import datetime
import os
import json

USERS_FILE = "usuarios.json"
DATA_FILE = "apuestas.csv"

st.set_page_config(page_title="Gesti√≥n de Apuestas", layout="wide")

# Cargar usuarios
if os.path.exists(USERS_FILE):
    with open(USERS_FILE, "r") as f:
        users = json.load(f)
else:
    users = {}

# Inicializar sesi√≥n
if "logueado" not in st.session_state:
    st.session_state.logueado = False
if "usuario" not in st.session_state:
    st.session_state.usuario = ""

if not st.session_state.logueado:
    st.title("üìä App de Gesti√≥n de Apuestas")
    st.subheader("üîê Inicio de sesi√≥n")

    username = st.text_input("Usuario")
    password = st.text_input("Contrase√±a", type="password")

    if username and password:
        if username in users:
            if users[username] == password:
                st.session_state.logueado = True
                st.session_state.usuario = username
                st.success(f"Sesi√≥n iniciada como **{username}**")
                st.rerun()
            else:
                st.error("‚ùå Contrase√±a incorrecta")
        else:
            if st.button("Registrar nuevo usuario"):
                users[username] = password
                with open(USERS_FILE, "w") as f:
                    json.dump(users, f)
                st.success("‚úÖ Usuario registrado correctamente. Recarga la p√°gina para continuar.")
else:
    st.markdown(
        f"<div style='text-align:right; font-size:0.9em; color:gray;'>üë§ Usuario: <b>{st.session_state.usuario}</b></div>",
        unsafe_allow_html=True
    )
    st.title("üìä App de Gesti√≥n de Apuestas")

    if os.path.exists(DATA_FILE):
        df = pd.read_csv(DATA_FILE)
    else:
        df = pd.DataFrame(columns=[
            "Usuario", "Fecha", "Evento", "Competici√≥n", "Deporte", "Tipo de Apuesta",
            "Pron√≥sticos", "Stake (1-10)", "Stake (‚Ç¨)", "Cuota", "Resultado", "Ganancia/P√©rdida (‚Ç¨)", "Bank (‚Ç¨)"
        ])

    tabs = st.tabs(["üìã Mis Apuestas", "üëÄ Ver Otras", "üìà Comparativa"])
    session_user = st.session_state.usuario

    with tabs[0]:
        st.header("üìã Mis Apuestas")

        with st.form("form_apuesta"):
            col1, col2 = st.columns(2)
            with col1:
                fecha = st.date_input("Fecha", datetime.date.today())
                evento = st.text_input("Evento")
                competicion = st.text_input("Competici√≥n")
                apuesta_tipo = st.radio("Tipo de apuesta", ["Simple", "Combinada"])
            with col2:
                deporte = st.selectbox("Deporte", ["F√∫tbol", "Baloncesto", "Tenis", "Otro"])
                cuota = st.number_input("Cuota total", min_value=1.01, step=0.01, format="%.2f")
                stake = st.slider("Stake (1-10)", 1, 10, 1)

            pronosticos = []
            if apuesta_tipo == "Combinada":
                with st.expander("A√±adir pron√≥sticos de la combinada"):
                    num_pronos = st.number_input("¬øCu√°ntos pron√≥sticos?", min_value=2, max_value=10, step=1)
                    for i in range(int(num_pronos)):
                        pron = st.text_input(f"Pron√≥stico {i+1}", key=f"pron_{i}")
                        pronosticos.append(pron)
            else:
                pronosticos.append(st.text_input("Pron√≥stico simple"))

            bank_anterior = df[df["Usuario"] == session_user]["Bank (‚Ç¨)"].iloc[-1] if not df[df["Usuario"] == session_user].empty else 200
            stake_estimado = round(stake * bank_anterior / 100, 2)
            st.markdown(f"üí∞ <b>Importe a apostar: {stake_estimado} ‚Ç¨</b>", unsafe_allow_html=True)

            enviar = st.form_submit_button("A√±adir Apuesta")

        if enviar:
            nueva = {
                "Usuario": session_user,
                "Fecha": fecha,
                "Evento": evento,
                "Competici√≥n": competicion,
                "Deporte": deporte,
                "Tipo de Apuesta": apuesta_tipo,
                "Pron√≥sticos": "; ".join(pronosticos),
                "Stake (1-10)": stake,
                "Stake (‚Ç¨)": stake_estimado,
                "Cuota": cuota,
                "Resultado": "Pendiente",
                "Ganancia/P√©rdida (‚Ç¨)": 0,
                "Bank (‚Ç¨)": bank_anterior
            }
            df = pd.concat([df, pd.DataFrame([nueva])], ignore_index=True)
            df.to_csv(DATA_FILE, index=False)
            st.success("‚úÖ Apuesta registrada")

        st.subheader("‚úèÔ∏è Gestionar mis apuestas")
        for idx, row in df[df["Usuario"] == session_user].iterrows():
            with st.expander(f"{row['Fecha']} - {row['Evento']} ({row['Tipo de Apuesta']})"):
                st.markdown(f"Pron√≥sticos: {row['Pron√≥sticos']}")
                st.markdown(f"Cuota: {row['Cuota']}")
                st.markdown(f"Stake: {row['Stake (‚Ç¨)']} ‚Ç¨")
                st.markdown(f"Resultado actual: {row['Resultado']}")
                if row['Resultado'] == "Pendiente":
                    col1, col2 = st.columns(2)
                    nuevo_res = col1.selectbox("Actualizar resultado", ["Pendiente", "Ganada", "Perdida", "Nula"], key=idx)
                    if nuevo_res != "Pendiente":
                        stake_euros = row["Stake (‚Ç¨)"]
                        if nuevo_res == "Ganada":
                            ganancia = round(stake_euros * (row["Cuota"] - 1), 2)
                        elif nuevo_res == "Perdida":
                            ganancia = -stake_euros
                        else:
                            ganancia = 0
                        bank_actual = row["Bank (‚Ç¨)"] + ganancia
                        df.at[idx, "Resultado"] = nuevo_res
                        df.at[idx, "Ganancia/P√©rdida (‚Ç¨)"] = ganancia
                        df.at[idx, "Bank (‚Ç¨)"] = bank_actual
                        df.to_csv(DATA_FILE, index=False)
                        st.success("‚úÖ Resultado actualizado")
                        st.rerun()
                    if col2.button("üóëÔ∏è Eliminar", key=f"del_{idx}"):
                        df = df.drop(idx)
                        df.to_csv(DATA_FILE, index=False)
                        st.warning("Apuesta eliminada")
                        st.rerun()

    with tabs[1]:
        st.header("üëÄ Ver apuestas de otros usuarios")
        opciones = df["Usuario"].unique().tolist()
        elegido = st.selectbox("Selecciona un usuario", opciones)
        st.dataframe(df[df["Usuario"] == elegido], use_container_width=True)

    with tabs[2]:
        st.header("üìà Comparativa entre usuarios")
        if df.empty:
            st.info("A√∫n no hay datos suficientes.")
        else:
            resumen = df.groupby("Usuario").agg({
                "Ganancia/P√©rdida (‚Ç¨)": "sum",
                "Stake (‚Ç¨)": "sum",
                "Resultado": lambda x: (x == "Ganada").sum(),
                "Evento": "count"
            }).rename(columns={
                "Ganancia/P√©rdida (‚Ç¨)": "Beneficio (‚Ç¨)",
                "Stake (‚Ç¨)": "Total Stake (‚Ç¨)",
                "Resultado": "Apuestas Ganadas",
                "Evento": "Total Apuestas"
            })
            resumen["Yield (%)"] = (resumen["Beneficio (‚Ç¨)"] / resumen["Total Stake (‚Ç¨)"]) * 100
            resumen["% √âxito"] = (resumen["Apuestas Ganadas"] / resumen["Total Apuestas"]) * 100
            st.dataframe(resumen[["Beneficio (‚Ç¨)", "Yield (%)", "% √âxito", "Total Apuestas"]], use_container_width=True)
            st.line_chart(df[df["Resultado"] != "Pendiente"].groupby("Usuario")["Ganancia/P√©rdida (‚Ç¨)"].sum())
